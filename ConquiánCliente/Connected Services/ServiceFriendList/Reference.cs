//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConquiánCliente.ServiceFriendList {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDto", Namespace="http://schemas.datacontract.org/2004/07/Conqui%C3%A1nServidor.Contracts.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class PlayerDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> idStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string levelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string pathPhotoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentPoints {
            get {
                return this.currentPointsField;
            }
            set {
                if ((object.ReferenceEquals(this.currentPointsField, value) != true)) {
                    this.currentPointsField = value;
                    this.RaisePropertyChanged("currentPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idPlayer {
            get {
                return this.idPlayerField;
            }
            set {
                if ((this.idPlayerField.Equals(value) != true)) {
                    this.idPlayerField = value;
                    this.RaisePropertyChanged("idPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> idStatus {
            get {
                return this.idStatusField;
            }
            set {
                if ((this.idStatusField.Equals(value) != true)) {
                    this.idStatusField = value;
                    this.RaisePropertyChanged("idStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string level {
            get {
                return this.levelField;
            }
            set {
                if ((object.ReferenceEquals(this.levelField, value) != true)) {
                    this.levelField = value;
                    this.RaisePropertyChanged("level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pathPhoto {
            get {
                return this.pathPhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.pathPhotoField, value) != true)) {
                    this.pathPhotoField = value;
                    this.RaisePropertyChanged("pathPhoto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestDto", Namespace="http://schemas.datacontract.org/2004/07/Conqui%C3%A1nServidor.Contracts.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class FriendRequestDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFriendshipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFriendship {
            get {
                return this.IdFriendshipField;
            }
            set {
                if ((this.IdFriendshipField.Equals(value) != true)) {
                    this.IdFriendshipField = value;
                    this.RaisePropertyChanged("IdFriendship");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceFriendList.IFriendList")]
    public interface IFriendList {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetPlayerByNickname", ReplyAction="http://tempuri.org/IFriendList/GetPlayerByNicknameResponse")]
        ConquiánCliente.ServiceFriendList.PlayerDto GetPlayerByNickname(string nickname, int idCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetPlayerByNickname", ReplyAction="http://tempuri.org/IFriendList/GetPlayerByNicknameResponse")]
        System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.PlayerDto> GetPlayerByNicknameAsync(string nickname, int idCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriends", ReplyAction="http://tempuri.org/IFriendList/GetFriendsResponse")]
        ConquiánCliente.ServiceFriendList.PlayerDto[] GetFriends(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriends", ReplyAction="http://tempuri.org/IFriendList/GetFriendsResponse")]
        System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.PlayerDto[]> GetFriendsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendList/SendFriendRequestResponse")]
        bool SendFriendRequest(int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendList/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> SendFriendRequestAsync(int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendList/GetFriendRequestsResponse")]
        ConquiánCliente.ServiceFriendList.FriendRequestDto[] GetFriendRequests(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendList/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.FriendRequestDto[]> GetFriendRequestsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/UpdateFriendRequestStatus", ReplyAction="http://tempuri.org/IFriendList/UpdateFriendRequestStatusResponse")]
        bool UpdateFriendRequestStatus(int idFriendship, int idStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/UpdateFriendRequestStatus", ReplyAction="http://tempuri.org/IFriendList/UpdateFriendRequestStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateFriendRequestStatusAsync(int idFriendship, int idStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/DeleteFriend", ReplyAction="http://tempuri.org/IFriendList/DeleteFriendResponse")]
        bool DeleteFriend(int idPlayer, int idFriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendList/DeleteFriend", ReplyAction="http://tempuri.org/IFriendList/DeleteFriendResponse")]
        System.Threading.Tasks.Task<bool> DeleteFriendAsync(int idPlayer, int idFriend);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListChannel : ConquiánCliente.ServiceFriendList.IFriendList, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendListClient : System.ServiceModel.ClientBase<ConquiánCliente.ServiceFriendList.IFriendList>, ConquiánCliente.ServiceFriendList.IFriendList {
        
        public FriendListClient() {
        }
        
        public FriendListClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendListClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConquiánCliente.ServiceFriendList.PlayerDto GetPlayerByNickname(string nickname, int idCurrentUser) {
            return base.Channel.GetPlayerByNickname(nickname, idCurrentUser);
        }
        
        public System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.PlayerDto> GetPlayerByNicknameAsync(string nickname, int idCurrentUser) {
            return base.Channel.GetPlayerByNicknameAsync(nickname, idCurrentUser);
        }
        
        public ConquiánCliente.ServiceFriendList.PlayerDto[] GetFriends(int idPlayer) {
            return base.Channel.GetFriends(idPlayer);
        }
        
        public System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.PlayerDto[]> GetFriendsAsync(int idPlayer) {
            return base.Channel.GetFriendsAsync(idPlayer);
        }
        
        public bool SendFriendRequest(int idSender, int idReceiver) {
            return base.Channel.SendFriendRequest(idSender, idReceiver);
        }
        
        public System.Threading.Tasks.Task<bool> SendFriendRequestAsync(int idSender, int idReceiver) {
            return base.Channel.SendFriendRequestAsync(idSender, idReceiver);
        }
        
        public ConquiánCliente.ServiceFriendList.FriendRequestDto[] GetFriendRequests(int idPlayer) {
            return base.Channel.GetFriendRequests(idPlayer);
        }
        
        public System.Threading.Tasks.Task<ConquiánCliente.ServiceFriendList.FriendRequestDto[]> GetFriendRequestsAsync(int idPlayer) {
            return base.Channel.GetFriendRequestsAsync(idPlayer);
        }
        
        public bool UpdateFriendRequestStatus(int idFriendship, int idStatus) {
            return base.Channel.UpdateFriendRequestStatus(idFriendship, idStatus);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFriendRequestStatusAsync(int idFriendship, int idStatus) {
            return base.Channel.UpdateFriendRequestStatusAsync(idFriendship, idStatus);
        }
        
        public bool DeleteFriend(int idPlayer, int idFriend) {
            return base.Channel.DeleteFriend(idPlayer, idFriend);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFriendAsync(int idPlayer, int idFriend) {
            return base.Channel.DeleteFriendAsync(idPlayer, idFriend);
        }
    }
}
