//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConquiánCliente.ServiceInvitation {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceInvitation.IInvitationService", CallbackContract=typeof(ConquiánCliente.ServiceInvitation.IInvitationServiceCallback))]
    public interface IInvitationService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInvitationService/Subscribe")]
        void Subscribe(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInvitationService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInvitationService/Unsubscribe")]
        void Unsubscribe(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInvitationService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationService/SendInvitation", ReplyAction="http://tempuri.org/IInvitationService/SendInvitationResponse")]
        bool SendInvitation(int idSender, string senderNickname, int idReceiver, string roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationService/SendInvitation", ReplyAction="http://tempuri.org/IInvitationService/SendInvitationResponse")]
        System.Threading.Tasks.Task<bool> SendInvitationAsync(int idSender, string senderNickname, int idReceiver, string roomCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInvitationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInvitationService/OnInvitationReceived")]
        void OnInvitationReceived(string senderNickname, string roomCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInvitationServiceChannel : ConquiánCliente.ServiceInvitation.IInvitationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvitationServiceClient : System.ServiceModel.DuplexClientBase<ConquiánCliente.ServiceInvitation.IInvitationService>, ConquiánCliente.ServiceInvitation.IInvitationService {
        
        public InvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public InvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public InvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(int idPlayer) {
            base.Channel.Subscribe(idPlayer);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int idPlayer) {
            return base.Channel.SubscribeAsync(idPlayer);
        }
        
        public void Unsubscribe(int idPlayer) {
            base.Channel.Unsubscribe(idPlayer);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int idPlayer) {
            return base.Channel.UnsubscribeAsync(idPlayer);
        }
        
        public bool SendInvitation(int idSender, string senderNickname, int idReceiver, string roomCode) {
            return base.Channel.SendInvitation(idSender, senderNickname, idReceiver, roomCode);
        }
        
        public System.Threading.Tasks.Task<bool> SendInvitationAsync(int idSender, string senderNickname, int idReceiver, string roomCode) {
            return base.Channel.SendInvitationAsync(idSender, senderNickname, idReceiver, roomCode);
        }
    }
}
